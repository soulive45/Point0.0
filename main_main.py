import logging
from flask import Flask, request
import hashlib
import hmac
import json
import base64
import requests
import openai
import aiosqlite
import asyncio
import discord
import matplotlib.pyplot as plt
import pandas as pd
from discord.ext import commands, tasks
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
from aiogram.types import FSInputFile
from datetime import time
import hashlib
import aiohttp
from datetime import datetime
from openai import OpenAI
from collections import defaultdict
from datetime import timezone
import random
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.state import State, StatesGroup  # –ò–º–ø–æ—Ä—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.filters import StateFilter  # –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from discord.ext import commands


# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()

DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GUILD_ID = 1346969339743703050  # ID —Å–µ—Ä–≤–µ—Ä–∞ –≤ Discord
DB_PATH = "bot_activity.db"  # –ï–¥–∏–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DISCORD_LINK = os.getenv("DISCORD_LINK")
TELEGRAM_LINK = os.getenv("TELEGRAM_LINK")


# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

logging.info("üü¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
SYSTEM_PROMPT = "You are a helpful assistant."  # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞


# üîπ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
intents = discord.Intents.default()
intents.messages = True
intents.message_content = True  # ‚ö†Ô∏è –ë–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!
intents.guilds = True
intents.members = True
discord_bot = commands.Bot(command_prefix="!", intents=intents)
dp = Dispatcher()
bot = Bot(token=TELEGRAM_TOKEN)
router = Router()
dp.include_router(router)








# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∫–∞–Ω–∞–ª–æ–≤ –≤ Discord (–ø—Ä–∏–º–µ—Ä)
target_channels = {
    "—Ç–æ—á–∫–∞-–≤—Ö–æ–¥–∞": 1346977292668239953,
    "—Ç–æ—á–∫–∞-–Ω–∞–º–µ—Ä–µ–Ω–∏—è": 1346977301874868234,
    "—Ç–æ—á–∫–∞-–∫–æ–Ω—Ç–∞–∫—Ç–∞": 1346977310376464394,
    "—Ç–æ—á–∫–∞-–≤—ã—Ö–æ–¥–∞": 1347010428571484283,
    "—Ç–æ—á–∫–∞-–¥–µ–π—Å—Ç–≤–∏—è": 1347010437773922515,
    "—Ç–æ—á–∫–∞-—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è": 1347010462885351535,
    "—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏": 1347010472209154218,
}

######################################################################
# üîπ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –≤–≤–æ–¥–µ —Ç–µ–∫—Å—Ç–∞
persistent_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start")],  # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç
    ],
    resize_keyboard=True,  # –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–¥ —ç–∫—Ä–∞–Ω
    one_time_keyboard=False,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start"  # –¢–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
)
# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_cmd(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üìä –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cmd_my_stats"
                ),
                types.InlineKeyboardButton(
                    text="üìâ –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="cmd_daily_graph"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üìã –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cmd_weekly"
                ),
                types.InlineKeyboardButton(
                    text="üìú –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="cmd_monthly"
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text="üü¶ Discord", callback_data="cmd_discord"
                ),
                types.InlineKeyboardButton(
                    text="üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="cmd_top_users"
                ),
                types.InlineKeyboardButton(
                    text="üîó–ü—Ä–∏–≤—è–∑–∞—Ç—å DS –ø–æ –Ω–∏–∫—É", callback_data="cmd_link_discord"
                ),
            ],
        ]
    )

    await bot.send_message(
        chat_id=message.chat.id,
        text="üëã –ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
        reply_markup=keyboard
    )

    # **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ë–ï–ó –ø—Ä–∏–≤—è–∑–∫–∏**
    await bot.send_message(
        chat_id=message.chat.id,
        text="‚¨áÔ∏è",
        reply_markup=persistent_keyboard
    )

@router.callback_query(F.data == "cmd_link_discord")
async def ask_for_discord_nickname(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ Discord:")
    await state.set_state("waiting_for_discord_nickname")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    await callback_query.answer()

@router.message(StateFilter("waiting_for_discord_nickname"))
async def link_discord_username(message: types.Message, state: FSMContext):
    discord_username = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º
    telegram_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """INSERT INTO user_links (discord_username, telegram_id) 
               VALUES (?, ?)
               ON CONFLICT(discord_username) 
               DO UPDATE SET telegram_id = ?""",  # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id –≤ —Å–ª—É—á–∞–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            (discord_username, telegram_id, telegram_id)
        )
        await db.commit()

    await message.answer(f"‚úÖ –í–∞—à Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Discord –Ω–∏–∫—É `{discord_username}`.")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ









# üìå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
@router.callback_query(F.data.startswith("cmd_"))
async def process_callback(callback_query: types.CallbackQuery):
    commands_map = {
        "cmd_my_stats": "/my_stats",
        "cmd_daily_graph": "/daily_graph",
        "cmd_weekly": "/weekly",
        "cmd_monthly": "/monthly",
        "cmd_discord": "/discord",
        "cmd_top_users": "/top_users",
        "cmd_link_discord": "/link_dicsord",
    }

    command = commands_map.get(callback_query.data)
    if command:
        # –°–æ–∑–¥–∞—ë–º "—Ñ–µ–π–∫–æ–≤–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fake_message = types.Message(
            message_id=callback_query.message.message_id,
            from_user=callback_query.from_user,
            chat=callback_query.message.chat,
            date=datetime.now(),
            text=command,
        )

        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –æ–±—ä–µ–∫—Ç types.Update –∏ –¥–æ–±–∞–≤–ª—è–µ–º update_id
        update = types.Update(update_id=callback_query.id, message=fake_message)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
        await dp.feed_update(bot, update=update)

    await callback_query.answer()



#############################################################################
#############################################################################
#############################################################################
# ‚úÖ **–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ Telegram-ADMIN**
@dp.message(Command("start_admin"))
async def start_cmd(message: Message):
    await message.answer(
        "üìå **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "üîπ /admin_weekly [Discord ID] - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞ –Ω–µ–¥–µ–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n"
        "üîπ /admin_monthly [Discord ID] - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞ –º–µ—Å—è—Ü —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n"
        "üîπ /moderation_list ‚Äì ‚Äî –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∏ –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
    )


# ‚úÖ **–ö–æ–º–∞–Ω–¥—ã –≤ Discord-ADMIN**
import discord

class AdminPanel(discord.ui.View):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥"""

    def __init__(self):
        super().__init__(timeout=None)  # ‚úÖ –î–µ–ª–∞–µ–º View –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º

    @discord.ui.button(label="üö® –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", style=discord.ButtonStyle.danger, custom_id="warn")
    async def warn_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `!warn @User [–ø—Ä–∏—á–∏–Ω–∞]`", ephemeral=True)

    @discord.ui.button(label="üîá –ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=discord.ButtonStyle.primary, custom_id="mute")
    async def mute_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîá –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `!mute @User [–≤—Ä–µ–º—è/–º–∏–Ω—É—Ç—ã] [–ø—Ä–∏—á–∏–Ω–∞]`", ephemeral=True)

    @discord.ui.button(label="‚õî –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=discord.ButtonStyle.danger, custom_id="ban")
    async def ban_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("‚õî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `!ban @User [–ø—Ä–∏—á–∏–Ω–∞]`", ephemeral=True)

    @discord.ui.button(label="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=discord.ButtonStyle.success, custom_id="unban")
    async def unban_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `!unban @User`", ephemeral=True)

    @discord.ui.button(label="üë¢ –ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", style=discord.ButtonStyle.danger, custom_id="kick")
    async def kick_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üë¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `!kick @User [–ø—Ä–∏—á–∏–Ω–∞]`", ephemeral=True)

    @discord.ui.button(label="üìú –°–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π", style=discord.ButtonStyle.secondary, custom_id="moderation_list")
    async def moderation_list_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üìú –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `!moderation_list`", ephemeral=True)




@discord_bot.command()
@commands.has_permissions(administrator=True)
async def admin_panel(ctx):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥"""
    
    embed = discord.Embed(
        title="‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        description="–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É:",
        color=discord.Color.red()
    )

    view = AdminPanel()  # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await ctx.send(embed=embed, view=view)


# ‚úÖ **–ö–æ–º–∞–Ω–¥—ã –≤ Discord**
@discord_bot.command("start")
async def start(ctx):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ Discord"""
    commands_list = (
        "**üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "üîπ !telegram - –¥–∞—ë—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–∞—à —Ç–≥-–∫–∞–Ω–∞–ª.\n"
    )
    await ctx.send(commands_list)






# ‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏**
# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_stats(user_id, days):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–¥–Ω–µ–π)"""
    date_from = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT point, COUNT(*) FROM activity WHERE user_id = ? AND timestamp >= ? GROUP BY point",
            (user_id, date_from),
        )
        return await cursor.fetchall()


# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ Discord ID –ø–æ Telegram ID
async def get_discord_id(telegram_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT discord_id FROM user_links WHERE telegram_id = ?", (telegram_id,)
        )
        result = await cursor.fetchone()
    return result[0] if result else None


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def save_activity(user_id, username, channel_id, point, message):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO activity (user_id, username, channel_id, point, message, timestamp) VALUES (?, ?, ?, ?, ?, ?)",
            (
                user_id,
                username,
                channel_id,
                point,
                message,
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            ),
        )
        await db.commit()
    logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {username} | {point} | {message}")






# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
async def get_activity():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT point, COUNT(*) FROM activity GROUP BY point")
        data = await cursor.fetchall()
    logging.info(f"üìä –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {data}")
    return data


async def get_top_users():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT username, COUNT(*) FROM activity GROUP BY username ORDER BY COUNT(*) DESC LIMIT 5"
        )
        return await cursor.fetchall()


async def get_activity_by_day():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT strftime('%w', timestamp) AS day, COUNT(*) FROM activity GROUP BY day"
        )
        return await cursor.fetchall()


################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
# ‚úÖ **–ö–æ–º–∞–Ω–¥—ã –≤ Telegram**
# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
async def generate_graph_activity():
    data = await get_activity()
    if not data:
        return None

    df = pd.DataFrame(data, columns=["point", "count"])
    plt.figure(figsize=(8, 6))
    plt.bar(df["point"], df["count"], color="skyblue")
    plt.xlabel("–¢–æ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
    plt.title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ç–æ—á–∫–∞–º")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig("activity_graph.png")
    plt.close()
    return "activity_graph.png"


async def generate_graph_daily():
    data = await get_activity_by_day()
    if not data:
        return None

    days = [
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
    ]
    df = pd.DataFrame(data, columns=["day", "count"])
    df["day"] = df["day"].astype(int)
    df = df.sort_values(by="day")

    plt.figure(figsize=(8, 6))
    plt.plot(df["day"], df["count"], marker="o", linestyle="-", color="green")
    plt.xticks(ticks=df["day"], labels=[days[d] for d in df["day"]])
    plt.xlabel("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
    plt.title("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    plt.tight_layout()
    plt.savefig("daily_graph.png")
    plt.close()
    return "daily_graph.png"


@router.message(Command("activity_graph"))
async def tg_activity_graph_cmd(message: Message):
    file = await generate_graph_activity()
    if file:
        photo = FSInputFile(file)  # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—É—Ç—å –≤ FSInputFile
        await message.answer_photo(photo, caption="üìä –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ç–æ—á–∫–∞–º")
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞!")


@router.message(Command("daily_graph"))
async def tg_daily_graph_cmd(message: Message):
    file = await generate_graph_daily()
    if file:
        photo = FSInputFile(file)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile
        await message.answer_photo(photo, caption="üìÖ –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞!")


@router.message(Command("top_users"))
async def tg_top_users_cmd(message: Message):
    data = await get_top_users()

    if not data:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö!")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    stats_message = "üèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for index, (username, count) in enumerate(data, start=1):
        stats_message += f"{index}. **{username}** ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    await message.answer(stats_message)


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_stats_by_nickname(nickname):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            """
            SELECT point, COUNT(*) 
            FROM activity 
            WHERE username = ?
            GROUP BY point
            """,
            (nickname,),
        )
        return await cursor.fetchall()


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_top_5_users():
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            """
            SELECT username, COUNT(*) 
            FROM activity 
            GROUP BY username 
            ORDER BY COUNT(*) DESC 
            LIMIT 5
            """
        )
        return await cursor.fetchall()


# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def generate_user_activity_graph(nickname):
    data = await get_user_stats_by_nickname(nickname)
    if not data:
        return None

    df = pd.DataFrame(data, columns=["point", "count"])
    plt.figure(figsize=(8, 6))
    plt.bar(df["point"], df["count"], color="blue")
    plt.xlabel("–¢–æ—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
    plt.title(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {nickname} –ø–æ —Ç–æ—á–∫–∞–º")
    plt.xticks(rotation=45)
    plt.tight_layout()
    filename = f"{nickname}_activity.png"
    plt.savefig(filename)
    plt.close()
    return filename

class Form(StatesGroup):
    waiting_for_nickname = State()

@router.message(Command("my_stats"))
async def request_nickname(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∏–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    await callback_query.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Discord –Ω–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    await state.set_state(Form.waiting_for_nickname)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.answer()


@router.message(StateFilter(Form.waiting_for_nickname))
async def process_nickname(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∏–∫ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /my_stats"""
    discord_nickname = message.text.strip()
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await my_stats_cmd(message, discord_nickname)




async def my_stats_cmd(message: types.Message, discord_nickname: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –Ω–∏–∫—É"""
    user_data = await get_user_stats_by_nickname(discord_nickname)
    top_users = await get_top_5_users()

    if not user_data:
        await message.answer(f"‚ùå –î–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {discord_nickname} –Ω–µ—Ç –≤ –±–∞–∑–µ!")
        return

    total_messages = sum(count for _, count in user_data)
    user_rank = next(
        (index + 1 for index, (user, _) in enumerate(top_users) if user == discord_nickname),
        None,
    )
    user_rank_text = (
        f"üìä {user_rank}-–µ –º–µ—Å—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" if user_rank else "üìä –í–Ω–µ —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

    top_3_points = sorted(user_data, key=lambda x: x[1], reverse=True)[:3]
    points_text = "\n".join(
        [
            f"{i+1}Ô∏è‚É£ {point} ‚Äì {count} —Å–æ–æ–±—â–µ–Ω–∏–π"
            for i, (point, count) in enumerate(top_3_points)
        ]
    )

    top_users_text = "\n".join(
        [
            f"{i+1}. üî• {user} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π"
            for i, (user, count) in enumerate(top_users)
        ]
    )

    stats_message = (
        f"üìä –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {discord_nickname}\n"
        f"- üìå –°–æ–æ–±—â–µ–Ω–∏–π: {total_messages} ({user_rank_text})\n"
        f"- üî• –¢–æ–ø-3 —Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n{points_text}\n\n"
        f"üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n{top_users_text}"
    )

    await message.answer(stats_message)



# ‚úÖ **–ö–æ–º–∞–Ω–¥–∞ /weekly - –Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
@router.message(Command("weekly"))
async def weekly_cmd(message: Message):
    discord_id = await get_discord_id(message.from_user.id)
    if not discord_id:
        await message.answer(
            "‚ö†Ô∏è –¢—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π Discord ID! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/link_discord [—Ç–≤–æ–π Discord ID]`"
        )
        return

    week_ago = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT point, COUNT(*) FROM activity WHERE user_id = ? AND timestamp >= ? GROUP BY point",
            (discord_id, week_ago),
        )
        data = await cursor.fetchall()

    if data:
        stats_message = "üìä **–ù–µ–¥–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        for point, count in data:
            stats_message += f"üîπ {point}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        await message.answer(stats_message)
    else:
        await message.answer("‚ÑπÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")


# ‚úÖ **–ö–æ–º–∞–Ω–¥–∞ /monthly - –º–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
@router.message(Command("monthly"))
async def monthly_cmd(message: Message):
    discord_id = await get_discord_id(message.from_user.id)
    if not discord_id:
        await message.answer(
            "‚ö†Ô∏è –¢—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π Discord ID! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É `/link_discord [—Ç–≤–æ–π Discord ID]`"
        )
        return

    month_ago = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute(
            "SELECT point, COUNT(*) FROM activity WHERE user_id = ? AND timestamp >= ? GROUP BY point",
            (discord_id, month_ago),
        )
        data = await cursor.fetchall()

    if data:
        stats_message = "üìä **–ú–µ—Å—è—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
        for point, count in data:
            stats_message += f"üîπ {point}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        await message.answer(stats_message)
    else:
        await message.answer("‚ÑπÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")


@router.message(Command("discord"))
async def discord_link_cmd(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Discord —Å–µ—Ä–≤–µ—Ä –∏–∑ .env"""
    if DISCORD_LINK:
        await message.answer(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à Discord —Å–µ—Ä–≤–µ—Ä: {DISCORD_LINK}")
    else:
        await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ Discord —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################
################################################################################################################

#   –ö–û–ú–ê–ù–î–´ DISCORD
@discord_bot.command()
async def telegram(ctx):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Discord —Å–µ—Ä–≤–µ—Ä –∏–∑ .env"""
    if TELEGRAM_LINK:
        await ctx.send(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à Telegram —Å–µ—Ä–≤–µ—Ä: {TELEGRAM_LINK}")
    else:
        await ctx.send("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ Discord —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@discord_bot.command()
@commands.has_permissions(manage_messages=True)
async def warn(ctx, member: discord.Member, *, reason="–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    """–í—ã–¥–∞—ë—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ –ø—Ä–∏ 3-—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤ –¥—Ä—É–≥–∏—Ö —Ç–æ—á–∫–∞—Ö."""
    user_id = member.id

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –±–∞–∑—É
            await db.execute(
                "INSERT INTO warnings (user_id, reason, timestamp) VALUES (?, ?, ?)",
                (user_id, reason, datetime.now().strftime("%Y-%m-%d %H:%M:%S")),
            )
            await db.commit()

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            cursor = await db.execute("SELECT COUNT(*) FROM warnings WHERE user_id = ?", (user_id,))
            warn_count = (await cursor.fetchone())[0]

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        await ctx.send(f"‚ö†Ô∏è {member.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –ü—Ä–∏—á–∏–Ω–∞: {reason} (‚ö† {warn_count}/3)")

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°
        try:
            await member.send(f"‚ö†Ô∏è –¢—ã –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ! –ü—Ä–∏—á–∏–Ω–∞: {reason} (‚ö† {warn_count}/3)")
        except discord.Forbidden:
            await ctx.send(f"‚ö†Ô∏è {member.mention}, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –õ–°!")

        # üö® –ï—Å–ª–∏ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏, –±–ª–æ–∫–∏—Ä—É–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        if warn_count >= 3:
            await move_to_weakness(ctx, member, reason="3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")

            async with aiosqlite.connect(DB_PATH) as db:
                # ‚úÖ –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–∞
                await db.execute("DELETE FROM warnings WHERE user_id = ?", (user_id,))
                await db.commit()

                # ‚úÖ –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –¥–∞—ë–º –ø–∏—Å–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ç–æ—á–∫–∞—Ö)
                await db.execute(
                    "INSERT INTO blocked_users (user_id, blocked) VALUES (?, 1) "
                    "ON CONFLICT(user_id) DO UPDATE SET blocked = 1",
                    (user_id,),
                )
                await db.commit()

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã
            async with aiosqlite.connect(DB_PATH) as db:
                cursor = await db.execute("SELECT COUNT(*) FROM warnings WHERE user_id = ?", (user_id,))
                new_warn_count = (await cursor.fetchone())[0]

            if new_warn_count == 0:
                await ctx.send(f"‚úÖ –°—á—ë—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π {member.mention} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!")
            else:
                await ctx.send(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–µ —Å–±—Ä–æ—Å–∏–ª–∏—Å—å! –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_warn_count}")

            # ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            await ctx.send(f"üö´ {member.mention} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö, –ø–æ–∫–∞ –Ω–µ –Ω–∞–ø–∏—à–µ—Ç –ø—Ä–∏—á–∏–Ω—É –≤ '—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏'!")
            try:
                await member.send("üö´ –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö, –ø–æ–∫–∞ –Ω–µ –Ω–∞–ø–∏—à–µ—à—å –ø—Ä–∏—á–∏–Ω—É –≤ '—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏'.")
            except discord.Forbidden:
                pass

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ !warn: {e}")
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {e}")




    




@discord_bot.command()
@commands.has_permissions(manage_messages=True)
async def mute(ctx, member: discord.Member, time: int, *, reason="–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    """–ú—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω—É—Ç—ã)"""
    mute_role = discord.utils.get(ctx.guild.roles, name="Muted")

    if not mute_role:
        mute_role = await ctx.guild.create_role(name="Muted")
        for channel in ctx.guild.channels:
            await channel.set_permissions(mute_role, send_messages=False)

    await member.add_roles(mute_role)
    unmute_time = (datetime.now() + timedelta(minutes=time)).strftime("%Y-%m-%d %H:%M:%S")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO muted_users (user_id, muted_until) VALUES (?, ?) "
            "ON CONFLICT(user_id) DO UPDATE SET muted_until = ?",
            (member.id, unmute_time, unmute_time),
        )
        await db.commit()

    await ctx.send(f"üîá {member.mention} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {time} –º–∏–Ω—É—Ç! –ü—Ä–∏—á–∏–Ω–∞: {reason}")

    await asyncio.sleep(time * 60)
    await member.remove_roles(mute_role)

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM muted_users WHERE user_id = ?", (member.id,))
        await db.commit()

    await ctx.send(f"‚úÖ {member.mention} —Ä–∞–∑–º—å—é—á–µ–Ω!")


@discord_bot.command()
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason="–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await member.ban(reason=reason)
    await ctx.send(f"‚õî {member.mention} –∑–∞–±–∞–Ω–µ–Ω! –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@discord_bot.command()
@commands.has_permissions(ban_members=True)
async def unban(ctx, *, username: str):
    """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É"""
    banned_users = await ctx.guild.bans()
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
    for ban_entry in banned_users:
        if ban_entry.user.name.lower() == username.lower():  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            await ctx.guild.unban(ban_entry.user)
            await ctx.send(f"‚úÖ {ban_entry.user.mention} —Ä–∞–∑–±–∞–Ω–µ–Ω!")
            return
    
    await ctx.send(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{username}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö!")


@discord_bot.command()
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason="–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    """–ö–∏–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    await member.kick(reason=reason)
    await ctx.send(f"üë¢ {member.mention} –∫–∏–∫–Ω—É—Ç! –ü—Ä–∏—á–∏–Ω–∞: {reason}")


@discord_bot.command()
@commands.has_permissions(manage_messages=True)
async def move_to_weakness(ctx, member: discord.Member, *, reason="–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏"""
    weakness_channel = discord_bot.get_channel(target_channels["—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏"])
    if weakness_channel:
        await weakness_channel.send(f"üö® {member.mention} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ —Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        await ctx.send(f"‚úÖ {member.mention} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ —Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏!")
    else:
        await ctx.send("‚ùå –ö–∞–Ω–∞–ª '—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω!")

@discord_bot.command()
@commands.has_permissions(manage_messages=True)
async def clear(ctx, amount: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await ctx.channel.purge(limit=amount + 1)
    await ctx.send(f"üßπ –£–¥–∞–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π!", delete_after=5)

@discord_bot.command()
@commands.has_permissions(manage_messages=True)
async def moderation_list(ctx):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º—É—Ç–∞–º–∏, –≤–∞—Ä–Ω–∞–º–∏, –±–∞–Ω–∞–º–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        cursor = await db.execute("SELECT user_id, reason FROM warnings")
        warns = await cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö
        cursor = await db.execute("SELECT user_id FROM muted_users")
        muted = await cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö
        cursor = await db.execute("SELECT user_id FROM banned_users")
        banned = await cursor.fetchall()

    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∫–∞ –ø–æ user_id
    def get_username(user_id):
        user = ctx.guild.get_member(user_id)
        return user.name if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏
    warn_list = "\n".join([f"‚ö† {get_username(user_id)} - {reason}" for user_id, reason in warns]) or "–ù–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
    mute_list = "\n".join([f"üîá {get_username(user_id)}" for user_id, in muted]) or "–ù–µ—Ç –∑–∞–º—å—é—á–µ–Ω–Ω—ã—Ö"
    ban_list = "\n".join([f"‚õî {get_username(user_id)}" for user_id, in banned]) or "–ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö"

    # –°–æ–∑–¥–∞—ë–º Embed
    embed = discord.Embed(title="üìå –°–ø–∏—Å–æ–∫ –Ω–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö", color=discord.Color.red())
    embed.add_field(name="‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", value=warn_list, inline=False)
    embed.add_field(name="üîá –ó–∞–º—å—é—á–µ–Ω–Ω—ã–µ", value=mute_list, inline=False)
    embed.add_field(name="‚õî –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ", value=ban_list, inline=False)

    await ctx.send(embed=embed)








##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
##############################################################################################################################
# –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç—ã –¥–ª—è OpenAI
PROMPTS = {
    "—Ç–æ—á–∫–∞-–≤—Ö–æ–¥–∞": "–¢—ã –ø–æ–ø–∞–ª –≤ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞. –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø–ª–∞–Ω –Ω–∞ —ç—Ç–æ—Ç —ç—Ç–∞–ø?",
    "—Ç–æ—á–∫–∞-–¥–µ–π—Å—Ç–≤–∏—è": "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ç–æ—á–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ö–∞–∫ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?",
    "—Ç–æ—á–∫–∞-—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è": "–¢—ã —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –≤—ã–∑–æ–≤–æ–º. –ö–∞–∫ —Ç—ã —Å –Ω–∏–º —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è?",
    "—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏": "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–ª–∞–±–æ—Å—Ç—å. –ß—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è?",
    "—Ç–æ—á–∫–∞-–∫–æ–Ω—Ç–∞–∫—Ç–∞": "–¢—ã –≤ —Ç–æ—á–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ!",
    "—Ç–æ—á–∫–∞-–Ω–∞–º–µ—Ä–µ–Ω–∏—è": "–ó–∞—á–µ–º —Ç—ã —Å—Ç—Ä–æ–∏—à—å –≤–µ—Å—å —ç—Ç–æ—Ç –ø—É—Ç—å?",
    "—Ç–æ—á–∫–∞-–≤—ã—Ö–æ–¥–∞": "–í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏. –ö–∞–∫ –ø—Ä–æ—à—ë–ª —ç—Ç–æ—Ç —ç—Ç–∞–ø?",
}
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ)
USER_MESSAGES = defaultdict(
    lambda: defaultdict(lambda: {"count": 0, "last_reset": datetime.now(timezone.utc)})
)

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
LAST_GREETING = defaultdict(lambda: {"date": None, "message": ""})


def generate_daily_greeting(user_point):
    greetings = [
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {user_point}! –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!",
        f"–°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ {user_point}! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!",
        f"–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ {user_point}? –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏!",
        f"–î–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–æ–≤—ã—Ö –∏–¥–µ–π –≤ {user_point}! –í–ø–µ—Ä—ë–¥ –∫ —É—Å–ø–µ—Ö—É!",
    ]
    return random.choice(greetings)


async def generate_openai_response(prompt, max_tokens=250):
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        max_tokens=max_tokens,
    )
    return response.choices[0].message.content.strip()


@discord_bot.command()
async def ask(ctx, *, user_message: str):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò –≤ —Ç–æ—á–∫–µ-–∫–æ–Ω—Ç–∞–∫—Ç–µ"""
    user_point = next(
        (point for point, ch_id in target_channels.items() if ch_id == ctx.channel.id),
        None,
    )

    if user_point == "—Ç–æ—á–∫–∞-–∫–æ–Ω—Ç–∞–∫—Ç–∞":
        ai_prompt = f"{PROMPTS[user_point]} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_message}. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ."
        ai_response = await generate_openai_response(ai_prompt)
        await ctx.send(f"‚ú® –û—Ç–≤–µ—Ç –ò–ò: {ai_response}")
    else:
        await ctx.send(f"üö´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ò–ò —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ—á–∫–µ-–∫–æ–Ω—Ç–∞–∫—Ç–∞!")


@discord_bot.event
async def on_message(message):
    if message.author.bot:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤

    # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ (!)
    if message.content.startswith("!"):
        await discord_bot.process_commands(message)
        return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ –¥–≤–∞–∂–¥—ã

    logging.info(f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord: {message.author.name} –≤ –∫–∞–Ω–∞–ª–µ ID {message.channel.id}: {message.content}")

    user_id = message.author.id
    username = message.author.name
    channel_id = message.channel.id
    now = datetime.now(timezone.utc)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∫–∞–Ω–∞–ª–∞
    user_point = next((point for point, ch_id in target_channels.items() if ch_id == channel_id), None)

    

    if user_point:
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–æ—á–∫–µ: {user_point}!")
        await save_activity(user_id, username, channel_id, user_point, message.content)
    else:
        logging.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ target_channels!")

    # ‚úÖ –ù–µ –≤—ã–∑—ã–≤–∞–µ–º process_commands() —Å–Ω–æ–≤–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤—ã—à–µ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.author.guild_permissions.administrator:
        await discord_bot.process_commands(message)
        return  # –ê–¥–º–∏–Ω—ã –Ω–µ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É
    user_point = next(
        (point for point, ch_id in target_channels.items() if ch_id == channel_id), None
    )
    

    if user_point:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–∑ –≤ –¥–µ–Ω—å –Ω–∞ —Ç–æ—á–∫—É)
        last_greeting_date = LAST_GREETING[user_point]["date"]
        if last_greeting_date is None or (now.date() > last_greeting_date):
            greeting_message = generate_daily_greeting(user_point)
            LAST_GREETING[user_point] = {
                "date": now.date(),
                "message": greeting_message,
            }
            await message.channel.send(f"üåü **{greeting_message}**")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏
        if (now - USER_MESSAGES[user_id][user_point]["last_reset"]).days >= 1:
            print(f"[DEBUG] –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {username} –≤ {user_point}")
            USER_MESSAGES[user_id][user_point] = {"count": 0, "last_reset": now}

        USER_MESSAGES[user_id][user_point]["count"] += 1
        print(
            f"[DEBUG] {username} –æ—Ç–ø—Ä–∞–≤–∏–ª {USER_MESSAGES[user_id][user_point]['count']} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {user_point}"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞)
        if (
            user_point != "—Ç–æ—á–∫–∞-–∫–æ–Ω—Ç–∞–∫—Ç–∞"
            and USER_MESSAGES[user_id][user_point]["count"] > 2
        ):
            try:
                await message.delete()
                print(
                    f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–¥–∞–ª–µ–Ω–æ –≤ {user_point}"
                )
            except discord.Forbidden:
                print(f"[WARNING] –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {user_point}")
                return

            try:
                await message.author.send(
                    f"üö´ –¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (2 –≤ –¥–µ–Ω—å) –≤ {user_point}! –°–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è."
                )
                print(f"[DEBUG] –õ–° –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
            except discord.Forbidden:
                print(
                    f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}, –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"
                )
                await message.channel.send(
                    f"{message.author.mention} üö´ –¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (2 –≤ –¥–µ–Ω—å) –≤ {user_point}!"
                )
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ OpenAI –≤–æ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö, –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏-–∫–æ–Ω—Ç–∞–∫—Ç–∞
        if user_point != "—Ç–æ—á–∫–∞-–∫–æ–Ω—Ç–∞–∫—Ç–∞":
            ai_prompt = f"{PROMPTS[user_point]} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message.content}. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ."
            ai_response = await generate_openai_response(ai_prompt)
            await message.channel.send(f"‚ú® {ai_response}")

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT blocked FROM blocked_users WHERE user_id = ?", (user_id,))
        blocked = await cursor.fetchone()

    # üö´ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –ø–∏—à–µ—Ç –ù–ï –≤ "—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏" ‚Üí —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if blocked and blocked[0] == 1 and user_point != "—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏":
        await message.delete()
        await message.author.send("üö´ –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö, –ø–æ–∫–∞ –Ω–µ –Ω–∞–ø–∏—à–µ—à—å –ø—Ä–∏—á–∏–Ω—É –≤ '—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏'.")
        return

    # ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –≤ "—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏", —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ
    if blocked and blocked[0] == 1 and user_point == "—Ç–æ—á–∫–∞-—Å–ª–∞–±–æ—Å—Ç–∏":
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("DELETE FROM blocked_users WHERE user_id = ?", (user_id,))
            await db.commit()
        await message.author.send("‚úÖ –¢—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ –ø–∏—Å–∞—Ç—å –≤–æ –≤—Å–µ—Ö —Ç–æ—á–∫–∞—Ö!")

    # üì© –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logging.info(f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Discord: {username} –≤ –∫–∞–Ω–∞–ª–µ ID {channel_id}: {message.content}")

    await discord_bot.process_commands(message)


# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@tasks.loop(hours=16)
async def send_daily_reminders():
    now = datetime.now(timezone.utc)
    logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {now}")

    for guild in discord_bot.guilds:
        for member in guild.members:
            if not member.bot:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —á–µ–ª–æ–≤–µ–∫ –∞–∫—Ç–∏–≤–µ–Ω –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ (–∫—Ä–æ–º–µ –≤—Ö–æ–¥–∞)
                was_active = any(
                    USER_MESSAGES[member.id][point]["count"] > 0
                    for point in target_channels
                    if point != "—Ç–æ—á–∫–∞-–≤—Ö–æ–¥–∞"
                )

                if was_active:
                    try:
                        await member.send("üìå –ù–µ –∑–∞–±—É–¥—å –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á—ë—Ç –≤ —Ç–æ—á–∫–µ-–≤—ã—Ö–æ–¥–∞!")
                        logger.info(f"üì© –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {member.name}")
                    except discord.Forbidden:
                        logger.warning(
                            f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° {member.name}! –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
                        )


# üîπ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∞)
@discord_bot.command()
async def test_reminder(ctx):
    """–†—É—á–Ω–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await send_daily_reminders()
    await ctx.send("üìå –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")




##############################################################################################################################
async def init_db():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    async with aiosqlite.connect(DB_PATH) as db:

        await db.execute("DROP TABLE IF EXISTS user_links;")
        await db.commit()

        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã activity, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.execute(
            """CREATE TABLE IF NOT EXISTS activity (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                channel_id INTEGER,
                point TEXT,
                message TEXT,
                timestamp TEXT
            )"""
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_links
        await db.execute(
            """CREATE TABLE IF NOT EXISTS user_links (
            discord_username TEXT PRIMARY KEY,
            telegram_id INTEGER UNIQUE
        )"""
        )
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_checkpoints
        await db.execute(
            """CREATE TABLE IF NOT EXISTS user_checkpoints (
                user_id INTEGER,
                point TEXT,
                UNIQUE(user_id, point)
            )"""
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_status
        await db.execute(
            """CREATE TABLE IF NOT EXISTS user_status (
                user_id INTEGER PRIMARY KEY,
                last_point TEXT,
                last_activity TIMESTAMP
            )"""
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã warnings
        await db.execute(
            """CREATE TABLE IF NOT EXISTS warnings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                reason TEXT,
                timestamp TEXT
            )"""
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã blocked_users
        await db.execute(
            """CREATE TABLE IF NOT EXISTS blocked_users (
                user_id INTEGER PRIMARY KEY,
                blocked INTEGER DEFAULT 0
            )"""
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã muted_users
        await db.execute(
            """CREATE TABLE IF NOT EXISTS muted_users (
                user_id INTEGER PRIMARY KEY,
                muted_until TEXT
            )"""
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã banned_users
        await db.execute(
            """CREATE TABLE IF NOT EXISTS banned_users (
                user_id INTEGER PRIMARY KEY
            )"""
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")


# üî• **–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤**
async def main():
    await init_db()

    discord_bot.add_view(AdminPanel())  # ‚úÖ –¢–µ–ø–µ—Ä—å –æ—à–∏–±–∫–∏ –Ω–µ –±—É–¥–µ—Ç!

    
    asyncio.create_task(discord_bot.start(DISCORD_TOKEN))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await asyncio.sleep(1)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –æ–±–æ–∏—Ö –±–æ—Ç–æ–≤
